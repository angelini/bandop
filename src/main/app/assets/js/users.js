// Generated by CoffeeScript 1.6.3
(function() {
  var _ref, _ref1,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  Bandop.User = (function(_super) {
    __extends(User, _super);

    function User() {
      _ref = User.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    User.urlPrefix = '/api';

    User.resourceName = 'user';

    User.persist(Batman.RestStorage);

    User.encode('email', 'domain');

    return User;

  })(Batman.Model);

  Bandop.UsersController = (function(_super) {
    __extends(UsersController, _super);

    function UsersController() {
      this.loginFailure = __bind(this.loginFailure, this);
      this.loginSuccess = __bind(this.loginSuccess, this);
      this.submitLogin = __bind(this.submitLogin, this);
      _ref1 = UsersController.__super__.constructor.apply(this, arguments);
      return _ref1;
    }

    UsersController.prototype.routingKey = 'users';

    UsersController.prototype.login = function(params) {
      if ($.cookie('_bandop_login')) {
        return Bandop.apiRequest({
          method: 'GET',
          url: 'auth/current',
          success: this.loginSuccess,
          error: this.loginError
        });
      }
    };

    UsersController.prototype.logout = function(params) {
      $.cookie('_bandop_login', '');
      Bandop.unset('currentUser');
      return Batman.redirect(Bandop.get('routes.login').path());
    };

    UsersController.prototype.submitLogin = function(form, event, view) {
      this.set('loginError', null);
      return Bandop.apiRequest({
        method: 'POST',
        url: 'auth/login',
        data: {
          email: view.get('email'),
          password: view.get('password')
        },
        success: this.loginSuccess,
        error: this.loginFailure
      });
    };

    UsersController.prototype.loginSuccess = function(user) {
      Bandop.set('currentUser', new Bandop.User(user));
      if (user.key) {
        $.cookie('_bandop_login', user.key);
      }
      return Batman.redirect(Bandop.get('routes.designs').path());
    };

    UsersController.prototype.loginFailure = function(request) {
      var _ref2;
      return this.set('loginError', (_ref2 = request.responseJSON) != null ? _ref2.message : void 0);
    };

    return UsersController;

  })(Batman.Controller);

}).call(this);
